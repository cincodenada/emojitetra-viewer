.status
.help
.q
CREATE TABLE hours (hour TIMESTAMP);
WITH RECURSIVE
  cnt(x) AS (
     SELECT 0
     UNION ALL
     SELECT x+1 FROM cnt
      LIMIT (SELECT ((strftime('%s','2018-11-14') - strftime('%s','2018-04-16')/(60*60))) + 1)
  )
INSERT INTO hours SELECT date(datetime('%s','2018-04-16'), '+' || x || ' hours') as date FROM cnt;
SELECT COUNT(*) FROM hours;
.q
WITH RECURSIVE
  cnt(x) AS (
     SELECT 0
     UNION ALL
     SELECT x+1 FROM cnt
      LIMIT (SELECT ((julianday('2018-11-14') - julianday('2018-04-16'))*24) + 1)
  )
INSERT INTO hours SELECT datetime(julianday('2018-04-16'), '+' || x || ' hours') as date FROM cnt;
SELECT * FROM hours;
SELECT * FROM (SELECT strftime("%Y-%m-%d %H", timestamp/1000, 'unixepoch') day, HEX(board) LIKE '%E297BD%' is_board, COUNT(*) cnt FROM boards b GROUP BY is_board, day) cnts RIGHT JOIN hours h ON h.hour=cnts.day WHERE is_board AND cnt < 3 ORDER BY is_board, day;
SELECT * FROM (SELECT strftime("%Y-%m-%d %H", timestamp/1000, 'unixepoch') day, HEX(board) LIKE '%E297BD%' is_board, COUNT(*) cnt FROM boards b GROUP BY is_board, day) cnts INNER JOIN hours h ON h.hour=cnts.day WHERE is_board AND cnt < 3 ORDER BY is_board, day;
.schema
SELECT * FROM (SELECT datetime(strftime("%Y-%m-%d %H:00:00", timestamp/1000, 'unixepoch')) day, HEX(board) LIKE '%E297BD%' is_board, COUNT(*) cnt FROM boards b GROUP BY is_board, day) cnts INNER JOIN hours h ON h.hour=cnts.day WHERE is_board AND cnt < 3 ORDER BY is_board, day;
SELECT * FROM hours h LEFT JOIN (SELECT datetime(strftime("%Y-%m-%d %H:00:00", timestamp/1000, 'unixepoch')) day, HEX(board) LIKE '%E297BD%' is_board, COUNT(*) cnt FROM boards b GROUP BY is_board, day) cnts ON h.hour = cnts.day WHERE is_board AND cnt < 3 ORDER BY is_board, day;
SELECT MIN(hours);
SELECT MIN(hour) FROM hours;
SELECT MAX(hour) FROM hours;
SELECT * FROM hours h LEFT JOIN (SELECT datetime(strftime("%Y-%m-%d %H:00:00", timestamp/1000, 'unixepoch')) day, HEX(board) LIKE '%E297BD%' is_board, COUNT(*) cnt FROM boards b GROUP BY is_board, day) cnts ON h.hour = cnts.day WHERE is_board AND cnt < 3 ORDER BY is_board, day;
SELECT hour, COUNT(boards.id) FROM hours h LEFT JOIN (SELECT datetime(strftime("%Y-%m-%d %H:00:00", timestamp/1000, 'unixepoch')) day, HEX(board) LIKE '%E297BD%' is_board FROM boards b WHERE is_board) boards ON h.hour = cnts.day WHERE cnt < 3 ORDER BY day;
SELECT hour, COUNT(boards.day) FROM hours h LEFT JOIN (SELECT datetime(strftime("%Y-%m-%d %H:00:00", timestamp/1000, 'unixepoch')) day, HEX(board) LIKE '%E297BD%' is_board FROM boards b WHERE is_board) boards ON h.hour = cnts.day WHERE cnt < 3 ORDER BY day;
SELECT hour, COUNT(boards.day) cnt FROM hours h LEFT JOIN (SELECT datetime(strftime("%Y-%m-%d %H:00:00", timestamp/1000, 'unixepoch')) day, HEX(board) LIKE '%E297BD%' is_board FROM boards b WHERE is_board) boards ON h.hour = boards.day WHERE cnt < 3 ORDER BY day;
SELECT * FROM (SELECT hour, COUNT(boards.day) cnt FROM hours h LEFT JOIN (SELECT datetime(strftime("%Y-%m-%d %H:00:00", timestamp/1000, 'unixepoch')) day, HEX(board) LIKE '%E297BD%' is_board FROM boards b WHERE is_board) boards ON h.hour = boards.day GROUP BY hour) WHERE cnt < 3 ORDER BY hour ASC
;
SELECT COUNT(*) FROM boards;
SELECT * FROM (SELECT hour, COUNT(boards.day) cnt FROM hours h LEFT JOIN (SELECT datetime(strftime("%Y-%m-%d %H:00:00", timestamp/1000, 'unixepoch')) day, HEX(board) LIKE '%E297BD%' is_board FROM boards b WHERE is_board) boards ON h.hour = boards.day GROUP BY hour) WHERE cnt < 3 ORDER BY hour ASC
;
SELECT * FROM (SELECT hour, COUNT(boards.day) cnt FROM hours h LEFT JOIN (SELECT datetime(strftime("%Y-%m-%d %H:00:00", timestamp/1000, 'unixepoch')) day, HEX(board) LIKE '%E297BD%' is_board FROM boards b WHERE is_board) boards ON h.hour = boards.day GROUP BY hour) WHERE cnt < 3 ORDER BY hour ASC
;
.q
SELECT COUNT(*) FROM boards;
SELECT COUNT(*) FROM board_meta;
cd .data/
;
.q
SELECT COUNT(*) FROM board_meta;
SELECT COUNT(*) FROM board_meta;
SELECT COUNT(*) FROM boards;
SELECT COUNT(*) FROM poll_data;
SELECT COUNT(*) FROM boards WHERE id NOT IN (SELECT tweet_id FROM poll_data);
SELECpoll_data from poll_data LIMIT 1;
SELECT poll_data from poll_data LIMIT 1;
SELECT id, strftime("%s", json_extract(poll_data, "$.last_updated_datetime_utc"))*1000, poll_data FROM boards WHERE id NOT IN(SELECT tweet_id FROM poll_data LIMIT 5;
SELECT id, strftime("%s", json_extract(poll_data, "$.last_updated_datetime_utc"))*1000, poll_data FROM boards WHERE id NOT IN(SELECT tweet_id FROM poll_data LIMIT 5;
INSERT INTO poll_data SELECT id, strftime("%s", json_extract(poll_data, "$.last_updated_datetime_utc"))*1000, poll_data FROM boards WHERE id NOT IN(SELECT tweet_id FROM poll_data) LIMIT 5;
SELECT * FROM boards LIMIT 5;
SELECT timestamp FROM boards LIMIT 5;
SELECT COUNT(*) FROM boards;
SELECT COUNT(*) FROM boards WHERE timestamp > 9999999999;
SELECT COUNT(*) FROM poll_data WHERE timestamp > 9999999999;
SELECT COUNT(*) FROM poll_data;
SELECT COUNT(*) FROM poll_data WHERE timestamp > 9999999999 OR timestamp IS NULL;
UPDATE boards SET timestamp=timestamp/1000 WHERE timestamp > 9999999999;
SELECT COUNT(*) FROM boards WHERE timestamp > 9999999999;
.q
quit
.q
;
.q
SELECT MIN(id) FROM boards;
SELECT MAX(id) FROM boards;
DELETE FROM boards WHERE id=1064368406873300993;
DELETE FROM boards WHERE id=1064368406873300993;
SELECT * FROM board_meta ORDER BY board_id DESC LIMIT 5;
.schema
RENAME TABLE poll_data TO sampled_data;
ALTER TABLE poll_data RENAME TO sampled_data;
.schema
ALTER TABLE sampled_data ADD COLUMN retweets INT
;
ALTER TABLE sampled_data ADD COLUMN likes INT;
SELECT * FROM sampled_data LIMIT 1;
SELECT * FROM sampled_data ORDER BY timestamp DESC LIMIT 1;
SELECT * FROM sampled_data ORDER BY timestamp DESC LIMIT 1;
SELECT * FROM sampled_data ORDER BY timestamp DESC LIMIT 1;
SELECT * FROM sampled_data ORDER BY timestamp DESC LIMIT 1;
SELECT * FROM sampled_data ORDER BY timestamp DESC LIMIT 1;
SELECT * FROM board_meta ORDER BY timestamp DESC LIMIT 5;
SELECT * FROM board_meta ORDER BY timestamp DESC LIMIT 10;
.schema
SELECT * FROM board_meta ORDER BY board_id DESC LIMIT 10;
SELECT * FROM board_meta ORDER BY board_id DESC LIMIT 10;
SELECT * FROM board_meta ORDER BY board_id DESC LIMIT 10;
.schema
.schema
SELECT COUNT(*) FROM boards;
.q
